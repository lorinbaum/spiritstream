from pathlib import Path
import unittest
from spiritstream.tree import treeify, tokenize, walk, serialize, tokenizeCSS, show, parse, css_to_dict, Status
from spiritstream.helpers import SPACES

TEST_CASES = [
    {
        "name": "emptylines",
        "md": "\n\n\t   \n",
        "tokens": [{"name":"empty_line"}] * 4,
        "nodes": [{"name":"body"}] + [{"name":"empty_line"}] * 4,
    },
    {
        "name": "heading",
        "md": "#no heading\n# heading\n## heading\n###### heading\n####### heading\n \t# no heading",
        "tokens": [{"name": "paragraph_line"},
            {"name": "heading","data": 1},
            {"name": "heading","data": 2},
            {"name": "heading","data": 6},
            {"name": "heading","data": 7}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "heading","data": 1},
            {"name": "heading","data": 2},
            {"name": "heading","data": 6},
            {"name": "heading","data": 7}],
    },
    {
        "name": "codeblock",
        "md": "hamedi\n~~~language line\n# no heading\n~~~\n``\n``` language \n\tcode\n```",
        "tokens": [{"name": "paragraph_line"},
            {"name":"codeblock", "data": ("language line",["# no heading"])},
            {"name": "paragraph_line"},
            {"name":"double_inline_code"},
            {"name": "codeblock", "data": ("language", ["\tcode"])}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name":"codeblock", "data": ("language line",["# no heading"])},
            {"name":"paragraph"},
            {"name": "codeblock", "data": ("language", ["\tcode"])}]
    },
    {
        "name": "horizontal rule",
        "md": [s:="\n***\n**\n****\n*****  \n* * *\n** * ** \n   **     *\n* **\n    ***\n     * **", s.replace("*", "-"), s.replace("*", "_")],
        "tokens": [{"name:" "empty_line"},
            {"name": "horizontal_rule"},
            {"name": "paragraph_line"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"}],
        "nodes": [{"name": "body"},
            {"name:" "empty_line"},
            {"name": "horizontal_rule"},
            {"name": "paragraph"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "horizontal_rule"},
            {"name": "codeblock"},
            {"name": "list"},
            {"name": "listitem"}],
    },
    {
        "name": "blockquote",
        "md": "> hamedi1\n    > hamedi2\n> hamedi3\n>> hamedi4\n>> hamedi5\n >hamid\n \\>hamud\n",
        "tokens": [{"name": "blockquote_line", "data": 1},
            {"name": "indented_line"},
            {"name": "blockquote_line", "data":1},
            {"name": "blockquote_line", "data":2},
            {"name": "blockquote_line", "data":2},
            {"name": "blockquote_line", "data":1},
            {"name": "paragraph_line"}],
        "nodes": [{"name": "body"},
            {"name": "blockquote", "data": 1},
            {"name": "codeblock"},
            {"name": "blockquote", "data":1},
            {"name": "blockquote", "data":2},
            {"name": "paragraph"}],
    },
    {
        "name": "unordered list",
        "md": "hamedi\n- hamedi2\n- hamedi3\n    hamedi4\n\n    - hamedi5",
        "tokens": [{"name": "paragraph_line"},
            {"name": "listitem", "data": (0, "unordered", None)},
            {"name": "listitem", "data": (0, "unordered", None)},
            {"name": "indented_line", "data": (4, "hamedi4")},
            {"name": "empty_line"},
            {"name": "listitem", "data": (4, "unordered", None)}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "list", "data": (0, "unordered")},
            {"name": "listitem", "data": None},
            {"name": "listitem", "data": None},
            {"name": "codeblock"},
            {"name": "empty_line"},
            {"name": "list", "data": (0, "")},
            {"name": "listitem", "data": None},
            {"name": "list", "data": (1, "unordered")},
            {"name": "listitem", "data": None}]
    },
    {
        "name": "ordered list",
        "md": "1. hamid\n001. hamedi\n-2. invalid\n4. hamedi2\n. hamedi3\n\n11. hamedii\n    15.         hamedi",
        "tokens": [{"name": "listitem", "data": (0, "ordered", 1)},
            {"name": "listitem", "data": (0, "ordered", 1)},
            {"name": "paragraph_line"},
            {"name": "listitem", "data": (0, "ordered", 4)},
            {"name": "paragraph_line"},
            {"name": "empty_line"},
            {"name": "listitem", "data": (0, "ordered", 11)},
            {"name": "listitem", "data": (4, "ordered", 15)}],
        "nodes": [{"name": "body"},
            {"name": "list", "data": (0, "ordered")},
            {"name": "listitem", "data": 1},
            {"name": "listitem", "data": 1},
            {"name": "paragraph"},
            {"name": "list", "data": (0, "ordered")},
            {"name": "listitem", "data": 4},
            {"name": "paragraph"},
            {"name": "empty_line"},
            {"name": "list", "data": (0, "ordered")},
            {"name": "listitem", "data": 11},
            {"name": "list", "data": (1, "ordered")},
            {"name": "listitem", "data": 15}]
    },
    {
        "name": "mixed_list",
        "md": "1. hamedi\n- hamid\n2. hamedi\n\t1. hamedi2\n- hamedi0\n\n\t- hamedi0\n2. hamedi2\n\n\t- hamedi",
        "tokens": [{"name": "listitem", "data": (0, "ordered", 1)},
            {"name": "listitem", "data": (0, "unordered", None)},
            {"name": "listitem", "data": (0, "ordered", 2)},
            {"name": "listitem", "data": (SPACES, "ordered", 1)},
            {"name": "listitem", "data": (0, "unordered", None)},
            {"name": "empty_line"},
            {"name": "listitem", "data": (SPACES, "unordered", None)},
            {"name": "listitem", "data": (0, "ordered", 2)},
            {"name": "empty_line"},
            {"name": "listitem", "data": (SPACES, "unordered", None)}],
        "nodes": [{"name": "body"},
            {"name": "list", "data": (0, "ordered")},
            {"name": "listitem"},
            {"name": "list", "data": (0, "unordered")},
            {"name": "listitem"},
            {"name": "list", "data": (0, "ordered")},
            {"name": "listitem"},
            {"name": "list", "data": (1, "ordered")},
            {"name": "listitem"},
            {"name": "list", "data": (0, "unordered")},
            {"name": "listitem"},
            {"name": "empty_line"},
            {"name": "list", "data": (0, "ordered")},
            {"name": "listitem"},
            {"name": "list", "data": (1, "unordered")},
            {"name": "listitem"},
            {"name": "listitem"},
            {"name": "empty_line"},
            {"name": "list", "data": (0, "")},
            {"name": "listitem"},
            {"name": "list", "data": (1, "unordered")},
            {"name": "listitem"},
            ]
    },
    {
        "name": "indented line",
        "md": "\n#hamedi0\n   #hamedi1\n    #hamedi2.5\n\t# hamedi2\n \t# hamedi3\n\t**hamedi**",
        "tokens": [{"name": "empty_line"},
            {"name": "paragraph_line"},
            {"name": "paragraph_line"},
            {"name": "indented_line", "data": (4, "#hamedi2.5")},
            {"name": "indented_line", "data": (4, "# hamedi2")},
            {"name": "indented_line", "data": (5, "# hamedi3")},
            {"name": "indented_line", "data": (4, "**hamedi**")}],
        "nodes": [{"name": "body"},
            {"name": "empty_line"},
            {"name": "paragraph"},
            {"name": "codeblock", "data": (None, ["#hamedi2.5", "# hamedi2", " # hamedi3", "**hamedi**"])}]
    },
    {
        "name": "paragraph",
        "md": "p\nparagraph2 multiword\n   indented slightly\n    indented too much\n    \np\n# not a paragraph\n**paragraph**\n   ",
        "tokens": [{"name": "paragraph_line"},
            {"name": "paragraph_line"},
            {"name": "paragraph_line"},
            {"name": "indented_line", "data": (4, "indented too much")},
            {"name": "empty_line"},
            {"name": "paragraph_line"},
            {"name": "heading", "data": 1},
            {"name": "paragraph_line"}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "codeblock"},
            {"name": "empty_line"},
            {"name": "paragraph"},
            {"name": "heading", "data": 1},
            {"name": "paragraph"}],
    },
    {
        "name": "italic",
        "md": [s:="hamedi*\nhamedi*is*here\n*hamedi* is here\nhamedi*\nis* here\nhamedi * is * here\nhamedi *is* here\nhamedi *is * here\nham*edi*\n***", s.replace("*", "_")],
        "tokens": [{"name": "paragraph_line"},
            {"name": "italic_end"},
            {"name": "paragraph_line"},
            {"name": "italic_toggle"},
            {"name": "italic_toggle"},
            {"name": "paragraph_line"},
            {"name": "italic_start"},
            {"name": "italic_end"},
            {"name": "paragraph_line"},
            {"name": "italic_end"},
            {"name": "paragraph_line"},
            {"name": "italic_end"},
            {"name": "paragraph_line"},
            {"name": "paragraph_line"},
            {"name": "italic_start"},
            {"name": "italic_end"},
            {"name": "paragraph_line"},
            {"name": "italic_start"},
            {"name": "paragraph_line"},
            {"name": "italic_toggle"},
            {"name": "italic_end"},
            {"name": "horizontal_rule"}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "italic"},
            {"name": "italic"},
            {"name": "italic"},
            {"name": "italic"},
            {"name": "italic"},
            {"name": "horizontal_rule"}]
    },
    {
        "name": "bold",
        "md": [s:="hamedi*\nhamedi*is*here\n*hamedi* is here\nhamedi*\nis* here\nhamedi * is * here\nhamedi *is* here\nhamedi *is * here\nham*edi*\n***".replace("*", "**"), s.replace("*", "_")],
        "tokens": [{"name": "paragraph_line"},
            {"name": "bold_end"},
            {"name": "paragraph_line"},
            {"name": "bold_toggle"},
            {"name": "bold_toggle"},
            {"name": "paragraph_line"},
            {"name": "bold_start"},
            {"name": "bold_end"},
            {"name": "paragraph_line"},
            {"name": "bold_end"},
            {"name": "paragraph_line"},
            {"name": "bold_end"},
            {"name": "paragraph_line"},
            {"name": "paragraph_line"},
            {"name": "bold_start"},
            {"name": "bold_end"},
            {"name": "paragraph_line"},
            {"name": "bold_start"},
            {"name": "paragraph_line"},
            {"name": "bold_toggle"},
            {"name": "bold_end"},
            {"name": "horizontal_rule"}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "bold"},
            {"name": "bold"},
            {"name": "bold"},
            {"name": "bold"},
            {"name": "bold"},
            {"name": "horizontal_rule"}]
    },
    {
        "name": "bolditalic",
        "md": [s:="hamedi*\nhamedi*is*here\n*hamedi* is here\nhamedi*\nis* here\nhamedi * is * here\nhamedi *is* here\nhamedi *is * here\nham*edi*\n***".replace("*", "***"), s.replace("*", "_")],
        "tokens": [{"name": "paragraph_line"},
            {"name": "bolditalic_end"},
            {"name": "paragraph_line"},
            {"name": "bolditalic_toggle"},
            {"name": "bolditalic_toggle"},
            {"name": "paragraph_line"},
            {"name": "bolditalic_start"},
            {"name": "bolditalic_end"},
            {"name": "paragraph_line"},
            {"name": "bolditalic_end"},
            {"name": "paragraph_line"},
            {"name": "bolditalic_end"},
            {"name": "paragraph_line"},
            {"name": "paragraph_line"},
            {"name": "bolditalic_start"},
            {"name": "bolditalic_end"},
            {"name": "paragraph_line"},
            {"name": "bolditalic_start"},
            {"name": "paragraph_line"},
            {"name": "bolditalic_toggle"},
            {"name": "bolditalic_end"},
            {"name": "horizontal_rule"}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "bold"},
            {"name": "italic"},
            {"name": "bold"},
            {"name": "italic"},
            {"name": "bold"},
            {"name": "italic"},
            {"name": "bold"},
            {"name": "italic"},
            {"name": "bold"},
            {"name": "italic"},
            {"name": "horizontal_rule"}]
    },
    {
        "name": "strikethrough",
        "md": "hamedi*\nhamedi*is*here\n*hamedi* is here\nhamedi*\nis* here\nhamedi * is * here\nhamedi *is* here\nhamedi *is * here\nham*edi*\n***".replace("*", "~~"),
        "tokens": [{"name": "paragraph_line"},
            {"name": "strikethrough_end"},
            {"name": "paragraph_line"},
            {"name": "strikethrough_toggle"},
            {"name": "strikethrough_toggle"},
            {"name": "paragraph_line"},
            {"name": "strikethrough_start"},
            {"name": "strikethrough_end"},
            {"name": "paragraph_line"},
            {"name": "strikethrough_end"},
            {"name": "paragraph_line"},
            {"name": "strikethrough_end"},
            {"name": "paragraph_line"},
            {"name": "paragraph_line"},
            {"name": "strikethrough_start"},
            {"name": "strikethrough_end"},
            {"name": "paragraph_line"},
            {"name": "strikethrough_start"},
            {"name": "paragraph_line"},
            {"name": "strikethrough_toggle"},
            {"name": "strikethrough_end"},
            {"name": "paragraph_line"}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "strikethrough"},
            {"name": "strikethrough"},
            {"name": "strikethrough"},
            {"name": "strikethrough"},
            {"name": "strikethrough"},
            {"name": "paragraph"}]
    },
    {
        "name": "wikilinks",
        "md": "[[hamedi0]]\n![[hamedi1]]\n\\![[hamedi2]]\n\\[hamedi3]\n\\[[hamedi4]]\n[[hamedi5]][[hamedi6]]\n[![ha]]\n[[hamedi7][hamedi8]]\n[[hamedi9]](breaking?)\n\\]]\n]\\]",
        "tokens": [{"name": "paragraph_line"},
            {"name": "wikilink_start"},
            {"name": "wikilink_end"},
            {"name": "paragraph_line"},
            {"name": "wikilink_embed_start"},
            {"name": "wikilink_end"},
            {"name": "paragraph_line"},
            {"name": "wikilink_start"},
            {"name": "wikilink_end"},
            {"name": "paragraph_line"},
            {"name": "paragraph_line"},
            {"name": "markdownlink_start"},
            {"name": "wikilink_end"},
            {"name": "paragraph_line"},
            {"name": "wikilink_start"},
            {"name": "wikilink_end"},
            {"name": "wikilink_start"},
            {"name": "wikilink_end"},
            {"name": "paragraph_line"},
            {"name": "markdownlink_start"},
            {"name": "markdownlink_embed_start"},
            {"name": "wikilink_end"},
            {"name": "paragraph_line"},
            {"name": "wikilink_start"},
            {"name": "markdownlink_start"},
            {"name": "wikilink_end"},
            {"name": "paragraph_line"},
            {"name": "wikilink_start"},
            {"name": "wikilink_end"},
            {"name": "opening_parenthesis"},
            {"name": "closing_parenthesis"}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "link", "data": "wiki"},
            {"name": "embed", "data": "wiki"},
            {"name": "link", "data": "wiki"},
            {"name": "link", "data": "wiki"},
            {"name": "link", "data": "wiki"},
            {"name": "link", "data": "wiki"},
            {"name": "link", "data": "wiki"}]
    },
    {
        "name": "markdown_links",
        "md": "[[hamedi1](hamedi2)]\n[hamedi3](hamedi4)\n    (hamedi5)[hamedi6]\n    [hamedi7\\](hamedi8)\n\\[[hamedi9](omedi)]]\n[ham[edi]](hamudi)\n![hamediembed](here)\n![hamediembed1invalid]",
        "tokens": [{"name": "paragraph_line"},
            {"name": "wikilink_start"},
            {"name": "markdownlink_switch"},
            {"name": "closing_parenthesis"},
            {"name": "paragraph_line"},
            {"name": "markdownlink_start"},
            {"name": "markdownlink_switch"},
            {"name": "closing_parenthesis"},
            {"name": "indented_line", "data": (4, "(hamedi5)[hamedi6]")},
            {"name": "indented_line", "data": (4, "[hamedi7\\](hamedi8)")},
            {"name": "paragraph_line"},
            {"name": "markdownlink_start"},
            {"name": "markdownlink_switch"},
            {"name": "closing_parenthesis"},
            {"name": "wikilink_end"},
            {"name": "paragraph_line"},
            {"name": "markdownlink_start"},
            {"name": "markdownlink_start"},
            {"name": "wikilink_end"},
            {"name": "opening_parenthesis"},
            {"name": "closing_parenthesis"},
            {"name": "paragraph_line"},
            {"name": "markdownlink_embed_start"},
            {"name": "markdownlink_switch"},
            {"name": "closing_parenthesis"},
            {"name": "paragraph_line"},
            {"name": "markdownlink_embed_start"}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "link", "data": "md switched"},
            {"name": "link", "data": "md switched"},
            {"name": "codeblock"},
            {"name": "paragraph"},
            {"name": "link", "data": "md switched"},
            {"name": "link", "data": "md switched"},
            {"name": "embed", "data": "md switched"}]
    },
    {
        "name": "parenthesis",
        "md": "\\((\\))\n",
        "tokens": [{"name": "paragraph_line"},
            {"name": "opening_parenthesis"},
            {"name": "closing_parenthesis"},
            {"name": "empty_line"},
            {"name": "endoffile"}],
        "nodes": [{"name": "body"}, {"name": "paragraph"}, {"name": "empty_line"}]
    },
    {
        "name": "double and single inline code",
        "md": "hamedi is ``coding`` with hamedi\nhamedi `` includes`in code`` 0\nhamedi ``includes`in code`` 1\nhamedi `codes` nothing\nhamedi``codes``nothing\n   ` hmid` or `not``",
        "tokens": [{"name": "paragraph_line"},
            {"name": "double_inline_code"},
            {"name": "double_inline_code"},
            {"name": "paragraph_line"},
            {"name": "double_inline_code"},
            {"name": "inline_code"},
            {"name": "double_inline_code"},
            {"name": "paragraph_line"},
            {"name": "double_inline_code"},
            {"name": "inline_code"},
            {"name": "double_inline_code"},
            {"name": "paragraph_line"},
            {"name": "inline_code"},
            {"name": "inline_code"},
            {"name": "paragraph_line"},
            {"name": "double_inline_code"},
            {"name": "double_inline_code"},
            {"name": "paragraph_line"},
            {"name": "inline_code"},
            {"name": "inline_code"},
            {"name": "inline_code"},
            {"name": "double_inline_code"}],
        "nodes": [{"name": "body"},
            {"name": "paragraph"},
            {"name": "double_inline_code"},
            {"name": "double_inline_code"},
            {"name": "double_inline_code"},
            {"name": "inline_code"},
            {"name": "double_inline_code"},
            {"name": "inline_code"},
            {"name": "inline_code"}]
    }
]

class test_ast_tokenizer(unittest.TestCase):
    def test_cases(self):
        for c in TEST_CASES:
            with self.subTest(c = c["name"]):
                for markdown in (c["md"] if isinstance(c["md"], list) else [c["md"]]):
                    # if c["name"] == "unordered list":
                    #     print(*tokenize(markdown), sep="\n")
                    #     show(parse(markdown))
                    tokens = list(t for t in tokenize(markdown) if t.name != "text") # ignoring text tokens for now
                    for i, (tok, truetok) in enumerate(zip(tokens, c["tokens"])):
                        if "name" in truetok: self.assertEqual(tok.name, truetok["name"], (i, tokens))
                        if "data" in truetok: self.assertEqual(tok.data, truetok["data"], (i, tokens))
                    head = treeify(tokens)
                    for i, (n, trueNode) in enumerate(zip(walk(head), c["nodes"])):
                        if "name" in trueNode: self.assertEqual(n.name, trueNode["name"], (i, list(walk(head))))
                        if "data" in trueNode: self.assertEqual(n.data, trueNode["data"], (i, list(walk(head))))
                    # check ast integrity
                    for node in walk(head):
                        if node.children:
                            for child in node.children:
                                self.assertIs(node, child.parent)
                        if node.parent: self.assertTrue(any(node is c for c in node.parent.children))
                        self.assertNotEqual(node.name, "bolditalic") # all bold italic nodes should be replaced by italic and bold nodes after treeification
                        if node.parent and node.parent.start and node.start: self.assertLessEqual(node.parent.start, node.start)
                        if node.parent and node.parent.end and node.end: self.assertGreaterEqual(node.parent.end, node.end)
                    
                    # head2 = parse(markdown)
                    # show(head2)
                    # print(serialize(head2, markdown))

class test_css_tokenizer(unittest.TestCase):
    def test_all(self):
        with open(Path(__file__).parent / "test.css", "r") as f: css = f.read()
        tree = tokenizeCSS(css)

        for node in walk(tree):
            if node.children:
                for child in node.children:
                    self.assertIs(node, child.parent)
            if node.parent: self.assertTrue(any(node is c for c in node.parent.children))
            self.assertIs(node.status, Status.CLOSED)

        show(tree)
        from pprint import pprint
        pprint(css_to_dict(tree))

if  __name__ == "__main__": unittest.main()